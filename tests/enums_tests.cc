#include <gtest/gtest.h>

#include "../src/internal/lq_enums.h"
#include <liteseq/types.h>

using namespace liteseq;

// Step 1: Define enum/string pairs
#define GFA_VERSION_ITEMS(_)                                                   \
	_(GFA_1_0, "VN:Z:1.0")                                                 \
	_(GFA_1_1, "VN:Z:1.1")                                                 \
	_(GFA_2_0, "VN:Z:2.0")

DEFINE_ENUM_AND_STRING(gfa_versions_e, GFA_VERSION_ITEMS)

// valid options
#define GFA_INVALID_STR "INVALID_STRING"

// invalid option. generated by macro
#define GFA_VERSION_INVALID gfa_versions_e_INVALID

TEST(Enum, ToString)
{
	gfa_versions_e version = GFA_1_0;
	const char *version_str = to_string_gfa_versions_e(version);
	ASSERT_STREQ(version_str, "VN:Z:1.0");

	version = GFA_1_1;
	version_str = to_string_gfa_versions_e(version);
	ASSERT_STREQ(version_str, "VN:Z:1.1");

	version = GFA_VERSION_INVALID;
	version_str = to_string_gfa_versions_e(version);
	ASSERT_STREQ(version_str, "UNKNOWN_gfa_versions_e");
}

TEST(Enum, FromString_Valid)
{
	const char *valid_strs[] = {"VN:Z:1.0", "VN:Z:1.1", "VN:Z:2.0"};
	const gfa_versions_e expected_versions[] = {GFA_1_0, GFA_1_1, GFA_2_0};
	const idx_t N = 3;

	for (idx_t i = 0; i < N; i++) {
		gfa_versions_e version =
			from_string_gfa_versions_e(valid_strs[i]);
		ASSERT_EQ(version, expected_versions[i]);
	}
}

TEST(Enum, FromString_Invalid)
{
	const char *invalid_strs[] = {"", "VN:Z:3.0", "INVALID_STRING",
				      "VN:Z:1.2"};
	const idx_t N = 4;

	for (idx_t i = 0; i < N; i++) {
		gfa_versions_e version =
			from_string_gfa_versions_e(invalid_strs[i]);
		ASSERT_EQ(version, GFA_VERSION_INVALID);
	}
}

TEST(Enum, FromString_Nullptr)
{
	gfa_versions_e v = from_string_gfa_versions_e(nullptr);
	ASSERT_EQ(v, GFA_VERSION_INVALID);
}

TEST(Enum, RoundTrip_EnumToStringToEnum)
{
	const gfa_versions_e all[] = {GFA_1_0, GFA_1_1, GFA_2_0};
	for (auto e : all) {
		const char *s = to_string_gfa_versions_e(e);
		ASSERT_NE(s, nullptr);
		ASSERT_EQ(from_string_gfa_versions_e(s), e);
	}
}

TEST(Enum, RoundTrip_StringToEnumToString)
{
	const char *all[] = {"VN:Z:1.0", "VN:Z:1.1", "VN:Z:2.0"};
	for (auto s : all) {
		auto e = from_string_gfa_versions_e(s);
		ASSERT_NE(e, GFA_VERSION_INVALID);
		ASSERT_STREQ(to_string_gfa_versions_e(e), s);
	}
}

TEST(Enum, FromString_WhitespaceAndCaseAreInvalid)
{
	const char *cases[] = {"vn:z:1.0", " VN:Z:1.0", "VN:Z:1.0 "};
	for (auto s : cases) {
		ASSERT_EQ(from_string_gfa_versions_e(s), GFA_VERSION_INVALID);
	}
}
